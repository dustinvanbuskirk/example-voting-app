version: '1.0'
mode: parallel
stages:
  - build
  - "security scans"
  - "pull request"
  - staging
  - production
steps:
  BuildResultImage:
    title: Building Result Image
    type: build
    stage: build
    image_name: example-voting-app/result
    working_directory: ./result/
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    on_success:
      metadata:
        set:
          - '${{BuildResultImage.imageId}}':
            - CF_QUALITY: true
            - Performance: true
            - Latency: ".89" 
            - Test_Coverage: "83%"
            - JIRA: "https://codefresh-io.atlassian.net/browse/MKTG-12"
    when:
      steps:
        - name: main_clone
          on:
            - success
  BuildVoteImage:
    title: Building Vote Image
    type: build
    stage: build
    image_name: example-voting-app/vote
    working_directory: ./vote/
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    on_success:
      metadata:
        set:
          - '${{BuildVoteImage.imageId}}':
            - CF_QUALITY: true
            - Performance: true
            - Latency: ".77" 
            - Test_Coverage: "90%"
            - JIRA: "https://codefresh-io.atlassian.net/browse/MKTG-12"
    when:
      steps:
        - name: main_clone
          on:
            - success
  BuildWorkerImage:
    title: Building Worker Image
    type: build
    stage: build
    image_name: example-voting-app/worker
    working_directory: ./worker/
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    on_success:
      metadata:
        set:
          - '${{BuildWorkerImage.imageId}}':
            - CF_QUALITY: true
            - Performance: true
            - Latency: ".46" 
            - Test_Coverage: "68%"
            - JIRA: "https://codefresh-io.atlassian.net/browse/MKTG-12"
    when:
      steps:
        - name: main_clone
          on:
            - success
  BuildTestImage:
    title: Building Test Image
    type: build
    stage: build
    image_name: example-voting-app/tests
    working_directory: ./tests/
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    when:
      steps:
        - name: main_clone
          on:
            - success
  ScanResultImage:
    image: codefresh/cfstep-paclair:3.0.0
    stage: "security scans"
    environment:
      - IMAGE=example-voting-app/result
      - TAG=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      steps:
        - name: BuildResultImage
          on:
            - success 
  ScanVoteImage:
    image: codefresh/cfstep-paclair:3.0.0
    stage: "security scans"
    environment:
      - IMAGE=example-voting-app/vote
      - TAG=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      steps:
       - name: BuildVoteImage
         on:
           - success 
  ScanWorkerImage:
    image: codefresh/cfstep-paclair:3.0.0
    stage: "security scans"
    environment:
      - IMAGE=example-voting-app/worker
      - TAG=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      steps:
       - name: BuildWorkerImage
         on:
           - success 
  ArchiveResultClairReport:
    image: mesosphere/aws-cli
    stage: "security scans"
    commands:
      - aws s3 cp ./reports/clair-scan-example-voting-app-result-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html s3://${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-result-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html --acl public-read
    on_success:
      metadata:
        set:
          - ${{BuildResultImage.imageId}}:
            - CLAIR_REPORT: "https://s3.amazonaws.com/${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-result-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html"
    when:
      steps:
        - name: ScanResultImage
          on:
            - success 
  ArchiveVoteClairReport:
    image: mesosphere/aws-cli
    stage: "security scans"
    commands:
      - aws s3 cp ./reports/clair-scan-example-voting-app-vote-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html s3://${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-vote-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html --acl public-read
    on_success:
      metadata:
        set:
          - ${{BuildVoteImage.imageId}}:
            - CLAIR_REPORT: "https://s3.amazonaws.com/${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-vote-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html"
    when:
      steps:
        - name: ScanVoteImage
          on:
            - success 
  ArchiveWorkerClairReport:
    image: mesosphere/aws-cli
    stage: "security scans"
    commands:
      - aws s3 cp ./reports/clair-scan-example-voting-app-worker-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html s3://${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-worker-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html --acl public-read
    on_success:
      metadata:
        set:
          - ${{BuildWorkerImage.imageId}}:
            - CLAIR_REPORT: "https://s3.amazonaws.com/${{S3_BUCKETNAME}}/${{CF_BUILD_ID}}/clair-scan-example-voting-app-worker-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}.html"
    when:
      steps:
        - name: ScanWorkerImage
          on:
            - success 
  NotifyGitHubPREnvCreating:
    title: Set Pull Request Environment pending
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Pull Request Environment
      - GITHUB_STATE=pending
      - GITHUB_DESCRIPTION=Creating Pull Request Environment
      - GITHUB_TARGET_URL=https://g.codefresh.io/helm/releases/sales-demo@FirstKubernetes/kube-system/${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}/services
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
      steps:
        - name: ArchiveResultClairReport
          on:
            - success
        - name: ArchiveVoteClairReport
          on:
            - success
        - name: ArchiveWorkerClairReport
          on:
            - success
  DeployPRRelease:
    stage: "pull request"
    title: Create Ephemeral Helm Release for Pull Request
    image: codefresh/cfstep-helm:2.10.0
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}'
      - KUBE_CONTEXT=sales-demo@FirstKubernetes
      - NAMESPACE=dustinvb-pull-requests
      - DEBUG_CHART=true
      - value_result_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/result
      - value_result_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-pull-requests
      - value_vote_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/vote
      - value_vote_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-pull-requests
      - value_worker_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/worker
      - value_worker_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-pull-requests  
    when:
      steps:
        - name: NotifyGitHubPREnvCreating
          on:
            - success
        - name: ArchiveVoteClairReport
          on:
            - success
        - name: ArchiveWorkerClairReport
          on:
            - success
  RunPRDVTs:
    stage: "pull request"
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run dustinvanbuskirk/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT=sales-demo@FirstKubernetes -v NAMESPACE=dustinvb-pull-requests -v SERVICES='vote result' -v RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}' -v TEST_IMAGE='example-voting-app/tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    when:
      steps:
        - name: DeployPRRelease
          on:
            - success 
  NotifyGitHubPREnvCreated:
    title: Set Pull Request Environment URL
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Pull Request Environment
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Created Pull Request Environment
      - GITHUB_TARGET_URL=https://g.codefresh.io/helm/releases/sales-demo@FirstKubernetes/kube-system/${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}/services
    when:
      steps:
        - name: RunPRDVTs
          on:
            - success 
  NotifySlackChannelPR:
    title: Sending Slack Notification for Pull Request Environment
    image: cloudposse/slack-notifier
    environment:
      - SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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
      - SLACK_USER_NAME=Codefresh
      - "SLACK_ICON_EMOJI=:superfresh:"
      - SLACK_TITLE=Pull Request Environment Deployed for ${{CF_BRANCH}}
      - SLACK_TITLE_LINK=https://g.codefresh.io/helm/releases/sales-demo@FirstKubernetes/kube-system/${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}/services
      - SLACK_FOOTER_ICON=https://pbs.twimg.com/profile_images/859843681553178624/AHcBc6EG_400x400.jpg
      - SLACK_THUMB_URL=https://pbs.twimg.com/profile_images/699752011428810753/ayRqrKW1_400x400.png
      - SLACK_FOOTER=Helm Deploy of example-voting-app
      - SLACK_AUTHOR_NAME=${{CF_BUILD_ID}}
      - SLACK_AUTHOR_LINK=${{CF_BUILD_URL}}
      - SLACK_AUTHOR_ICON=https://github.com/${{CF_BUILD_INITIATOR}}.png
      - SLACK_FIELD1_TITLE=Environment
      - SLACK_FIELD1_VALUE=Pull Request
      - SLACK_FIELD1_SHORT=true
      - SLACK_FIELD2_TITLE=Version
      - SLACK_FIELD2_VALUE=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - SLACK_FIELD2_SHORT=true
    when:
      steps:
        - name: RunPRDVTs
          on:
            - success 
  PushChartToHelmRepository:
    stage: staging
    title: Push Helm Chart to Repository
    image: codefresh/cfstep-helm:2.10.0
    environment:
      - ACTION=push
      - CHART_REF=example-voting-app
      - CHART_VERSION=${{CF_RELEASE_TAG}}
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
      steps:
        - name: RunPRDVTs
          on:
            - finished
  UpgradeStagingRelease:
    stage: staging
    title: Upgrading Staging Release
    image: codefresh/cfstep-helm:2.10.0
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=example-voting-app
      - KUBE_CONTEXT=sales-demo@FirstKubernetes
      - NAMESPACE=dustinvb-staging
      - DEBUG_CHART=true
      - value_result_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/result
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-staging
      - value_vote_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/vote
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-staging
      - value_worker_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/worker
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-staging
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
      steps:
        - name: PushChartToHelmRepository
          on:
            - success 
  RunStagingDVTs:
    stage: staging
    title: Running DVTS on Staging Release
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run dustinvanbuskirk/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT=sales-demo@FirstKubernetes -v NAMESPACE=dustinvb-staging -v SERVICES='vote result' -v RELEASE_NAME='example-voting-app' -v TEST_IMAGE='example-voting-app/tests:master-${{CF_SHORT_REVISION}}'
    when:
      steps:
        - name: UpgradeStagingRelease
          on:
            - success 
  NotifySlackChannelStaging:
    title: Sending Slack Notification for Staging Upgrade
    image: cloudposse/slack-notifier
    environment:
      - SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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
      - SLACK_USER_NAME=Codefresh
      - "SLACK_ICON_EMOJI=:superfresh:"
      - SLACK_TITLE=Staging Upgraded
      - SLACK_TITLE_LINK=https://g.codefresh.io/helm/releases/sales-demo@FirstKubernetes/kube-system/example-voting-app/services
      - SLACK_FOOTER_ICON=https://pbs.twimg.com/profile_images/859843681553178624/AHcBc6EG_400x400.jpg
      - SLACK_THUMB_URL=https://pbs.twimg.com/profile_images/699752011428810753/ayRqrKW1_400x400.png
      - SLACK_FOOTER=Helm Deploy of example-voting-app
      - SLACK_AUTHOR_NAME=${{CF_BUILD_ID}}
      - SLACK_AUTHOR_LINK=${{CF_BUILD_URL}}
      - SLACK_AUTHOR_ICON=https://github.com/${{CF_BUILD_INITIATOR}}.png
      - SLACK_FIELD1_TITLE=Environment
      - SLACK_FIELD1_VALUE=Staging
      - SLACK_FIELD1_SHORT=true
      - SLACK_FIELD2_TITLE=Version
      - SLACK_FIELD2_VALUE=${{CF_RELEASE_TAG}}
      - SLACK_FIELD2_SHORT=true
      - "SLACK_FIELD3_TITLE=:github: GitHub Release"
      - SLACK_FIELD3_VALUE=https://github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}/releases/tag/${{CF_RELEASE_TAG}}
    when:
      steps:
        - name: RunStagingDVTs
          on:
            - success 
  UpgradeProductionRelease:
    stage: production
    title: Upgrading Production Release
    image: codefresh/cfstep-helm:2.10.0
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=example-voting-app
      - KUBE_CONTEXT=sales-prod@FirstKubernetes
      - NAMESPACE=dustinvb-production
      - DEBUG_CHART=true
      - value_result_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/result
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-production
      - value_vote_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/vote
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-production
      - value_worker_image_repository=r.cfcr.io/dustinvanbuskirk/example-voting-app/worker
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-dustinvb-production
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
      steps:
        - name: RunStagingDVTs
          on:
            - success 
  RunProductionDVTs:
    stage: production
    title: Running DVTS on Production Release
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run dustinvanbuskirk/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT=sales-prod@FirstKubernetes -v NAMESPACE=dustinvb-production -v SERVICES='vote result' -v RELEASE_NAME='example-voting-app' -v TEST_IMAGE='example-voting-app/tests:master-${{CF_SHORT_REVISION}}'
    when:
      steps:
        - name: UpgradeProductionRelease
          on:
            - success 
  NotifySlackChannelProduction:
    title: Sending Slack Notification for Production Upgrade
    image: cloudposse/slack-notifier
    environment:
      - SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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
      - SLACK_USER_NAME=Codefresh
      - "SLACK_ICON_EMOJI=:superfresh:"
      - SLACK_TITLE=Production Upgraded
      - SLACK_TITLE_LINK=https://g.codefresh.io/helm/releases/sales-prod@FirstKubernetes/kube-system/example-voting-app/services
      - SLACK_FOOTER_ICON=https://pbs.twimg.com/profile_images/859843681553178624/AHcBc6EG_400x400.jpg
      - SLACK_THUMB_URL=https://pbs.twimg.com/profile_images/699752011428810753/ayRqrKW1_400x400.png
      - SLACK_FOOTER=Helm Deploy of example-voting-app
      - SLACK_AUTHOR_NAME=${{CF_BUILD_ID}}
      - SLACK_AUTHOR_LINK=${{CF_BUILD_URL}}
      - SLACK_AUTHOR_ICON=https://github.com/${{CF_BUILD_INITIATOR}}.png
      - SLACK_FIELD1_TITLE=Environment
      - SLACK_FIELD1_VALUE=Production
      - SLACK_FIELD1_SHORT=true
      - SLACK_FIELD2_TITLE=Version
      - SLACK_FIELD2_VALUE=${{CF_RELEASE_TAG}}
      - SLACK_FIELD2_SHORT=true
      - "SLACK_FIELD3_TITLE=:github: GitHub Release"
      - SLACK_FIELD3_VALUE=https://github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}/releases/tag/${{CF_RELEASE_TAG}}
    when:
      steps:
        - name: RunProductionDVTs
          on:
            - success 