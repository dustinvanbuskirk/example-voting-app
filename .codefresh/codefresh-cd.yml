version: '1.0'
stages:
  - build
  - "pull request"
  - staging
  - production
steps:
  BuildingMicroServices:
    type: parallel
    stage: build
    steps:
      BuildResultImage:
        title: Building Result Image
        type: build
        image_name: example-voting-app/result
        working_directory: ./result/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildVoteImage:
        title: Building Vote Image
        type: build
        image_name: example-voting-app/vote
        working_directory: ./vote/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildWorkerImage:
        title: Building Worker Image
        type: build
        image_name: example-voting-app/worker
        working_directory: ./worker/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildTestImage:
        title: Building Test Image
        type: build
        image_name: example-voting-app/tests
        working_directory: ./tests/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    fail_fast: true
  DeployPRRelease:
    stage: "pull request"
    title: Create Ephemeral Helm Release for Pull Request
    image: dustinvanbuskirk/cfstep-helm:demo
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}'
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=${{KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - CMD_PS=-f helm_vars/example-voting-app/pull-requests/worker/secrets.yaml
      - value_result_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/result
      - value_result_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_vote_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/vote
      - value_vote_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_worker_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/worker
      - value_worker_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  RunPRDVTs:
    stage: "pull request"
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run ${{CF_REPO_OWNER}}/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=${{KUBE_NAMESPACE}} -v SERVICES='vote result' -v RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}' -v TEST_IMAGE='example-voting-app/tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  PushChartToHelmRepository:
    stage: staging
    title: Push Helm Chart to Repository
    image: dustinvanbuskirk/cfstep-helm:demo
    environment:
      - ACTION=push
      - CHART_REF=example-voting-app
      - CHART_VERSION=${{CF_RELEASE_TAG}}
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  UpgradeStagingRelease:
    stage: staging
    title: Upgrading Staging Release
    image: dustinvanbuskirk/cfstep-helm:demo
    working_directory: /
    environment:
      - CHART_REF=example-voting-app
      - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=staging-example-voting-app
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=${{KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/staging/worker/secrets.yaml
      - value_result_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/result
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_vote_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/vote
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_worker_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/worker
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  RunStagingDVTs:
    stage: staging
    title: Running DVTS on Staging Release
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run ${{CF_REPO_OWNER}}/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=${{KUBE_NAMESPACE}} -v SERVICES='vote result' -v RELEASE_NAME='staging-example-voting-app' -v TEST_IMAGE='example-voting-app/tests:master-${{CF_SHORT_REVISION}}'
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  ProductionApproval:
    type: pending-approval
    title: Deploy to Production?
    description: Deploys current release to production
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  UpgradeProductionRelease:
    stage: production
    title: Upgrading Production Release
    image: dustinvanbuskirk/cfstep-helm:demo
    working_directory: /
    environment:
      - CHART_REF=example-voting-app
      - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=production-example-voting-app
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=${{KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      # NEED PGP Key in metadata of CD spec
      - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/production/worker/secrets.yaml
      - value_result_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/result
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_vote_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/vote
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
      - value_worker_image_repository=r.cfcr.io/${{CF_ACCOUNT}}/example-voting-app/worker
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      steps:
      - name: ProductionApproval
        on:
        - approved
  RunProductionDVTs:
    stage: production
    title: Running DVTS on Production Release
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run ${{CF_REPO_OWNER}}/example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=${{KUBE_NAMESPACE}} -v SERVICES='vote result' -v RELEASE_NAME='production-example-voting-app' -v TEST_IMAGE='example-voting-app/tests:master-${{CF_SHORT_REVISION}}'
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"